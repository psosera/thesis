################################################################################
#
# gen-content.py
#
# Generates a content layout-and-label tex file out of a directory structure
# suitable for a book project.  For example, the following directory structure:
#
# content/
#   01 A/
#     01 a.tex
#   02 B/
#     01 b.tex
#     02 c.tex
#
# Creates the following tex file:
#
# \part{A}
# \label{part:a}
#
# \chapter{a}
# \label{ch:a}
# \input{"content/01 A/01 a"}
#
# \part{B}
# \label{part:b}
#
# \chapter{b}
# \label{ch:b}
# \input{"content/02 B/01 b"}
#
# \chapter{c}
# \label{ch:c}
# \input{"content/02 B/02 c"}
#
################################################################################

from itertools import chain
from operator import itemgetter
from os.path import isdir, isfile, join, splitext
from os import listdir
import sys
import time

def sort_list(l):
    return sorted(l, key=itemgetter(0))

def extract_chapters(base):
    files = [ f for f in listdir(base) if isfile(join(base, f)) ]
    chs   = []
    for f in files:
        # Each chapter file has the form: <Num> <Name>
        # corresponding to "Chapter n: <Name>" where <Num>
        # specifies the ordering relative to the other chapters
        # in the enclosing Part.
        (fullname, _) = splitext(f)
        (num, name)   = fullname.split(' ', 1)
        # NOTE: ignore temporary files (i.e., that start with '.')
        if not fullname.startswith('.'):
            chs.append( (num, name) )
    return sort_list(chs)

def extract_parts(base):
    dirs  = [ d for d in listdir(base) if isdir(join(base, d)) ]
    parts = []
    for d in dirs:
        # Each directory has the form: <Num> <Name>
        # corresponding to "Part <Num>: <Name>"
        [num, name] = d.split(' ', 1)
        chs         = extract_chapters(join(base, d))
        parts.append( (num, name, chs) )
    return sort_list(parts)

def labelify_name(name):
    return name.lower().replace(' ', '-')

def write_part(base, part):
    (num, name, chs) = part
    label            = labelify_name(name)
    return ['\\part{{{0}}}\n\\label{{part:{1}}}'.format(name, label)] +\
        [write_chapter(join(base, '{0} {1}'.format(num, name)), ch) for ch in chs]

def write_chapter(base, ch):
    (num, name) = ch
    label       = labelify_name(name)
    return '\\chapter{{{0}}}\n\\label{{ch:{1}}}\n\\input{{\"{2}\"}}'.format(\
        name, label, join(base, '{0} {1}'.format(num, name)))

def write_parts(base, parts):
    output = list(chain(*[write_part(base, part) for part in parts]))
    return '\n\n'.join(output)

def main(args):
    if len(args) <> 2:
        print 'Usage: {0} <content directory>'.format(args[0])
    else:
        base  = args[1]
        preamble = extract_chapters(base)
        parts    = extract_parts(base)
        print '%%%%% Automatically generated by {0}: {1} %%%%%\n'.format(\
            args[0], time.strftime('%c'))
        print '\n\n'.join([write_chapter(base, ch) for ch in preamble])
        print
        print write_parts(base, parts)

if __name__ == '__main__':
    main(sys.argv)

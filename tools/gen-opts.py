################################################################################
#
# gen-opts.py
#
# Generates an option file to be combined with optspkg.sty.  Emulates passing
# common command-line arguments to control comments, draft mode, debugging, etc.
# to a LaTeX build.
#
# Options are enabled by passing their name.  All options are off by default.
# The list of available options is given by the options variable below or can be
# viewed by running gen-opts without any arguments.
#
################################################################################

import sys
import time

options = \
    { 'overfullhbox' : 'Adds visualization for overfull hboxes'
    , 'syntaxonly' : 'Enables syntax-only checking'
    , 'comments' : 'Enables comments (\\todo and \\comment)'
    , 'draft' : 'Enables draft mode (\\toggletrue{draft})'
    }

def print_options():
    print 'Supported options:'
    maxlen = len(max(options.keys(), key=len))
    for opt, comment in options.iteritems():
        print '    {0}{1}'.format(opt.ljust(maxlen + 4), comment)

def get_options(args):
    opts = []
    for arg in args:
        if arg in options.keys():
            opts.append(arg)
        else:
            print 'Invalid option: {0}'.format(arg)
            print_options()
            sys.exit(2)
    return opts

def main(args):
    if len(args) <= 1:
        print 'Usage: {0} <options>'.format(args[0])
        print_options()
    else:
        opts = get_options(args[1:])
        print '%%%%% Automatically generated by {0}: {1} %%%%%\n'.format(\
            args[0], time.strftime('%c'))
        for opt in opts:
            print '\\toggletrue{{{0}}}'.format(opt)

if __name__ == '__main__':
    main(sys.argv)
